'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
class Registry {
    constructor(options) {
        this._registrations = {};
        this._registeredOptions = {};
        this._registeredInjections = {};
        if (options && options.fallback) {
            this._fallback = options.fallback;
        }
    }
    register(specifier, factoryDefinition, options) {
        this._registrations[specifier] = factoryDefinition;
        if (options) {
            this._registeredOptions[specifier] = options;
        }
    }
    registration(specifier) {
        let registration = this._registrations[specifier];
        if (registration === undefined && this._fallback) {
            registration = this._fallback.registration(specifier);
        }
        return registration;
    }
    unregister(specifier) {
        delete this._registrations[specifier];
        delete this._registeredOptions[specifier];
        delete this._registeredInjections[specifier];
    }
    registerOption(specifier, option, value) {
        let options = this._registeredOptions[specifier];
        if (!options) {
            options = {};
            this._registeredOptions[specifier] = options;
        }
        options[option] = value;
    }
    registeredOption(specifier, option) {
        let result;
        let options = this.registeredOptions(specifier);
        if (options) {
            result = options[option];
        }
        if (result === undefined && this._fallback !== undefined) {
            result = this._fallback.registeredOption(specifier, option);
        }
        return result;
    }
    registeredOptions(specifier) {
        let options = this._registeredOptions[specifier];
        if (options === undefined) {
            let type = specifier.split(':')[0];
            options = this._registeredOptions[type];
        }
        return options;
    }
    unregisterOption(specifier, option) {
        let options = this._registeredOptions[specifier];
        if (options) {
            delete options[option];
        }
    }
    registerInjection(specifier, property, source) {
        let injections = this._registeredInjections[specifier];
        if (injections === undefined) {
            this._registeredInjections[specifier] = injections = [];
        }
        injections.push({
            property,
            source
        });
    }
    registeredInjections(specifier) {
        let type = specifier.split(':')[0];
        let injections = this._fallback ? this._fallback.registeredInjections(specifier) : [];
        Array.prototype.push.apply(injections, this._registeredInjections[type]);
        Array.prototype.push.apply(injections, this._registeredInjections[specifier]);
        return injections;
    }
}
exports.default = Registry;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlZ2lzdHJ5LmpzIl0sIm5hbWVzIjpbIlJlZ2lzdHJ5IiwiY29uc3RydWN0b3IiLCJvcHRpb25zIiwiX3JlZ2lzdHJhdGlvbnMiLCJfcmVnaXN0ZXJlZE9wdGlvbnMiLCJfcmVnaXN0ZXJlZEluamVjdGlvbnMiLCJmYWxsYmFjayIsIl9mYWxsYmFjayIsInJlZ2lzdGVyIiwic3BlY2lmaWVyIiwiZmFjdG9yeURlZmluaXRpb24iLCJyZWdpc3RyYXRpb24iLCJ1bmRlZmluZWQiLCJ1bnJlZ2lzdGVyIiwicmVnaXN0ZXJPcHRpb24iLCJvcHRpb24iLCJ2YWx1ZSIsInJlZ2lzdGVyZWRPcHRpb24iLCJyZXN1bHQiLCJyZWdpc3RlcmVkT3B0aW9ucyIsInR5cGUiLCJzcGxpdCIsInVucmVnaXN0ZXJPcHRpb24iLCJyZWdpc3RlckluamVjdGlvbiIsInByb3BlcnR5Iiwic291cmNlIiwiaW5qZWN0aW9ucyIsInB1c2giLCJyZWdpc3RlcmVkSW5qZWN0aW9ucyIsIkFycmF5IiwicHJvdG90eXBlIiwiYXBwbHkiXSwibWFwcGluZ3MiOiI7Ozs7O0FBQWUsTUFBTUEsUUFBTixDQUFlO0FBQzFCQyxnQkFBWUMsT0FBWixFQUFxQjtBQUNqQixhQUFLQyxjQUFMLEdBQXNCLEVBQXRCO0FBQ0EsYUFBS0Msa0JBQUwsR0FBMEIsRUFBMUI7QUFDQSxhQUFLQyxxQkFBTCxHQUE2QixFQUE3QjtBQUNBLFlBQUlILFdBQVdBLFFBQVFJLFFBQXZCLEVBQWlDO0FBQzdCLGlCQUFLQyxTQUFMLEdBQWlCTCxRQUFRSSxRQUF6QjtBQUNIO0FBQ0o7QUFDREUsYUFBU0MsU0FBVCxFQUFvQkMsaUJBQXBCLEVBQXVDUixPQUF2QyxFQUFnRDtBQUM1QyxhQUFLQyxjQUFMLENBQW9CTSxTQUFwQixJQUFpQ0MsaUJBQWpDO0FBQ0EsWUFBSVIsT0FBSixFQUFhO0FBQ1QsaUJBQUtFLGtCQUFMLENBQXdCSyxTQUF4QixJQUFxQ1AsT0FBckM7QUFDSDtBQUNKO0FBQ0RTLGlCQUFhRixTQUFiLEVB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Q0FBMkJMLFVBQTNCLEVBQXVDLEtBQUtyQixxQkFBTCxDQUEyQkksU0FBM0IsQ0FBdkM7QUFDQSxlQUFPaUIsVUFBUDtBQUNIO0FBNUV5QjtrQkFBVDFCLFEiLCJmaWxlIjoicmVnaXN0cnkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBjbGFzcyBSZWdpc3RyeSB7XG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgICAgICB0aGlzLl9yZWdpc3RyYXRpb25zID0ge307XG4gICAgICAgIHRoaXMuX3JlZ2lzdGVyZWRPcHRpb25zID0ge307XG4gICAgICAgIHRoaXMuX3JlZ2lzdGVyZWRJbmplY3Rpb25zID0ge307XG4gICAgICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMuZmFsbGJhY2spIHtcbiAgICAgICAgICAgIHRoaXMuX2ZhbGxiYWNrID0gb3B0aW9ucy5mYWxsYmFjaztcbiAgICAgICAgfVxuICAgIH1cbiAgICByZWdpc3RlcihzcGVjaWZpZXIsIGZhY3RvcnlEZWZpbml0aW9uLCBvcHRpb25zKSB7XG4gICAgICAgIHRoaXMuX3JlZ2lzdHJhdGlvbnNbc3BlY2lmaWVyXSA9IGZhY3RvcnlEZWZpbml0aW9uO1xuICAgICAgICBpZiAob3B0aW9ucykge1xuICAgICAgICAgICAgdGhpcy5fcmVnaXN0ZXJlZE9wdGlvbnNbc3BlY2lmaWVyXSA9IG9wdGlvbnM7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmVnaXN0cmF0aW9uKHNwZWNpZmllcikge1xuICAgICAgICBsZXQgcmVnaXN0cmF0aW9uID0gdGhpcy5fcmVnaXN0cmF0aW9uc1tzcGVjaWZpZXJdO1xuICAgICAgICBpZiAocmVnaXN0cmF0aW9uID09PSB1bmRlZmluZWQgJiYgdGhpcy5fZmFsbGJhY2spIHtcbiAgICAgICAgICAgIHJlZ2lzdHJhdGlvbiA9IHRoaXMuX2ZhbGxiYWNrLnJlZ2lzdHJhdGlvbihzcGVjaWZpZXIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZWdpc3RyYXRpb247XG4gICAgfVxuICAgIHVucmVnaXN0ZXIoc3BlY2lmaWVyKSB7XG4gICAgICAgIGRlbGV0ZSB0aGlzLl9yZWdpc3RyYXRpb25zW3NwZWNpZmllcl07XG4gICAgICAgIGRlbGV0ZSB0aGlzLl9yZWdpc3RlcmVkT3B0aW9uc1tzcGVjaWZpZXJdO1xuICAgICAgICBkZWxldGUgdGhpcy5fcmVnaXN0ZXJlZEluamVjdGlvbnNbc3BlY2lmaWVyXTtcbiAgICB9XG4gICAgcmVnaXN0ZXJPcHRpb24oc3BlY2lmaWVyLCBvcHRpb24sIHZhbHVlKSB7XG4gICAgICAgIGxldCBvcHRpb25zID0gdGhpcy5fcmVnaXN0ZXJlZE9wdGlvbnNbc3BlY2lmaWVyXTtcbiAgICAgICAgaWYgKCFvcHRpb25zKSB7XG4gICAgICAgICAgICBvcHRpb25zID0ge307XG4gICAgICAgICAgICB0aGlzLl9yZWdpc3RlcmVkT3B0aW9uc1tzcGVjaWZpZXJdID0gb3B0aW9ucztcbiAgICAgICAgfVxuICAgICAgICBvcHRpb25zW29wdGlvbl0gPSB2YWx1ZTtcbiAgICB9XG4gICAgcmVnaXN0ZXJlZE9wdGlvbihzcGVjaWZpZXIsIG9wdGlvbikge1xuICAgICAgICBsZXQgcmVzdWx0O1xuICAgICAgICBsZXQgb3B0aW9ucyA9IHRoaXMucmVnaXN0ZXJlZE9wdGlvbnMoc3BlY2lmaWVyKTtcbiAgICAgICAgaWYgKG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IG9wdGlvbnNbb3B0aW9uXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVzdWx0ID09PSB1bmRlZmluZWQgJiYgdGhpcy5fZmFsbGJhY2sgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5fZmFsbGJhY2sucmVnaXN0ZXJlZE9wdGlvbihzcGVjaWZpZXIsIG9wdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgcmVnaXN0ZXJlZE9wdGlvbnMoc3BlY2lmaWVyKSB7XG4gICAgICAgIGxldCBvcHRpb25zID0gdGhpcy5fcmVnaXN0ZXJlZE9wdGlvbnNbc3BlY2lmaWVyXTtcbiAgICAgICAgaWYgKG9wdGlvbnMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgbGV0IHR5cGUgPSBzcGVjaWZpZXIuc3BsaXQoJzonKVswXTtcbiAgICAgICAgICAgIG9wdGlvbnMgPSB0aGlzLl9yZWdpc3RlcmVkT3B0aW9uc1t0eXBlXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3B0aW9ucztcbiAgICB9XG4gICAgdW5yZWdpc3Rlck9wdGlvbihzcGVjaWZpZXIsIG9wdGlvbikge1xuICAgICAgICBsZXQgb3B0aW9ucyA9IHRoaXMuX3JlZ2lzdGVyZWRPcHRpb25zW3NwZWNpZmllcl07XG4gICAgICAgIGlmIChvcHRpb25zKSB7XG4gICAgICAgICAgICBkZWxldGUgb3B0aW9uc1tvcHRpb25dO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJlZ2lzdGVySW5qZWN0aW9uKHNwZWNpZmllciwgcHJvcGVydHksIHNvdXJjZSkge1xuICAgICAgICBsZXQgaW5qZWN0aW9ucyA9IHRoaXMuX3JlZ2lzdGVyZWRJbmplY3Rpb25zW3NwZWNpZmllcl07XG4gICAgICAgIGlmIChpbmplY3Rpb25zID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX3JlZ2lzdGVyZWRJbmplY3Rpb25zW3NwZWNpZmllcl0gPSBpbmplY3Rpb25zID0gW107XG4gICAgICAgIH1cbiAgICAgICAgaW5qZWN0aW9ucy5wdXNoKHtcbiAgICAgICAgICAgIHByb3BlcnR5LFxuICAgICAgICAgICAgc291cmNlXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZWdpc3RlcmVkSW5qZWN0aW9ucyhzcGVjaWZpZXIpIHtcbiAgICAgICAgbGV0IHR5cGUgPSBzcGVjaWZpZXIuc3BsaXQoJzonKVswXTtcbiAgICAgICAgbGV0IGluamVjdGlvbnMgPSB0aGlzLl9mYWxsYmFjayA/IHRoaXMuX2ZhbGxiYWNrLnJlZ2lzdGVyZWRJbmplY3Rpb25zKHNwZWNpZmllcikgOiBbXTtcbiAgICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkoaW5qZWN0aW9ucywgdGhpcy5fcmVnaXN0ZXJlZEluamVjdGlvbnNbdHlwZV0pO1xuICAgICAgICBBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseShpbmplY3Rpb25zLCB0aGlzLl9yZWdpc3RlcmVkSW5qZWN0aW9uc1tzcGVjaWZpZXJdKTtcbiAgICAgICAgcmV0dXJuIGluamVjdGlvbnM7XG4gICAgfVxufSJdfQ==